---
title: "Data Manipulation: Part 2"
format: html
---

In this lesson, we will be learning about "tidy" data and tools to reshape and join datasets. We will also learn about data.tables, which are a more efficient alternative to dataframes for large datasets.

## Contents

1.  [Tidy data](#tidy-data)
2.  [Pivot operations](#pivot-operations) (`pivot_wider`, `pivot_longer`)
3.  [Join operations]
4.  [data.table]

## Tidy data

Rules for tidy data:

1.  Each variable must have its own column.
2.  Each observation must have its own row.
3.  Each value must have its own cell.

Let's say we have a dataset with the weights of two pet cats:

```{r}
cat_data <- tibble(
  year = c(2017, 2018, 2019, 2020, 2021, 2022),
  milo = c(4, 6.3, 8, 7.9, 8.1, 8.1),
  kitty = c(15.6, 15.9, 14, 12.2, 10.9, 9.9)
)
cat_data
```

## Pivot operations

**`pivot_longer()`**: used to transform data from a wide format to a long format. It "lengthens" data, increasing the number of rows and decreasing the number of columns

```{r, echo = TRUE}
long_data <- wide_data %>%
  pivot_longer(cols = c("milo", "kitty"),
               names_to = "cat",
               values_to = "weight")
long_data
```

**`pivot_wider()`**: used to transform data from a long format to a wide format. It "widens" data, increasing the number of columns and decreasing the number of rows

```{r, echo = TRUE}
long_data %>%
  pivot_wider(names_from = "cat",
              values_from = "weight")
```

This may be useful when making a summary table to display.

## Join operations

### Mutating joins

Joins combine tables based on an identified key, usually a variable that the two tables share in common.

-   `left_join()`

-   `right_join()`

-   `full_join()`

-   `inner_join()`

    ![](../../05_src/slides_resources/05_join-venn.png)

### Keys

1.  Primary keys uniquely identify an observation in its table
2.  Foreign keys uniquely identify an observation in another table

Primary keys may match foreign keys, if the variable is present in both tables and has the same name.

Primary and foreign keys have a specific relation: it could be one-to-one, or one-to-many.

### Example using toy data

We will make two small datasets, each with year as a variable. Year will be the key we use to join.

```{r, echo = TRUE}
employment <- tibble(year = c(1990, 1991, 1992, 1994),
                     rate = c(.05, .02, .04, .02))
employment
```

```{r, echo = TRUE}
housing <- tibble(date = c(1991, 1992, 1993, 1994, 1995),
                  rate = c(0.89, 0.6, 0.75, 0.88, 0.9))
housing
```

### Inner Join

The rows correspond to years that are present in both `employment` and `housing`:

```{r, echo = TRUE}
employment %>%
  inner_join(housing, by = c("year" = "date"))
```

Because both tables have a variable named `rate`, the joined table has columns named `rate.x` from the left table (employment) and `rate.y` from the right table (housing).

### Left Join

The rows correspond to years that are present in both `employment`but not necessarily `housing`:

```{r, echo = TRUE}
employment %>%
  left_join(housing, by = c("year" = "date"))
```

Missing values are filled with `NA`.

### Right Join

The rows correspond to years that are present in `housing` but not necessarily `employment`:

```{r, echo = TRUE}
employment %>%
  right_join(housing, by = c("year" = "date"))
```

### Full Join

The rows correspond to years that are present in `employment`or `housing`:

```{r, echo = TRUE}
employment %>%
  full_join(housing, by = c("year" = "date"))
```

### Filtering joins

Semi joins keep all observations in the employment table that have a match in the housing table:

```{r, echo = TRUE}
employment %>%
  semi_join(housing, by = c("year" = "date"))
```

Anti joins drop all observations in employment that have a match in housing:

```{r, echo = TRUE}
employment %>%
  anti_join(housing, by = c("year" = "date"))
```

## data.table

data.tables are faster and more memory efficient than data.frames, making them better suited for large operations on large data sets.

They are keyed, which makes it possible to use binary search. A key is an index, created from column(s) in the data.table. It may or may not be unique.

```{r, echo = TRUE}
data(iris)

dt_iris <- as.data.table(iris)

dt_iris
```

You can see how many tables are stored and what size they are:

```{r, echo = TRUE}
tables()
```

To get information about our data, we can use `sapply` and `class`:

```{r, echo = TRUE}
sapply(dt_iris, class)
```

To check if the data.table has a key:

```{r, echo = TRUE}
haskey(dt_iris)
```

To set a key:

```{r, echo = TRUE}
setkey(dt_iris, Species)
haskey(dt_iris)
```

### General form

`datatable[i, j, k]`

Where:

-   from datatable
-   i is selected and/or filtered
-   j is calculated
-   k is grouped by

### Subsetting rows

```{r , echo = TRUE, eval=FALSE}
dt_iris[Petal.Width > 0.5]
```

### Selecting columns

Selecting a column to return as a vector:

```{r, echo = TRUE, eval=FALSE}
dt_iris[, Species]
```

Selecting a column to return as a data.table:

```{r, echo = TRUE, eval=FALSE}
dt_iris[, list(Species)]
```

### Computations

Counting the number of cases where Petal.Length plus Petal.Width is greater than 2:

```{r, echo = TRUE, eval=FALSE}
dt_iris[, sum((Petal.Length + Petal.Width) > 2)]
```

### Combining subsetting and computation

Counting the number of cases where Species is "setosa" and Petal.Length plus Petal.Width is greater than 2:

```{r, echo = TRUE, eval=FALSE}
dt_iris[Species == "setosa", sum((Petal.Length + Petal.Width) > 2)]
```

### Counting observations in current group

```{r, echo = TRUE, eval=FALSE}
dt_iris[Species == "setosa", .N]
```

### Aggregations

Counting the number in each Species group:

```{r, echo = TRUE, eval=FALSE}
dt_iris[, .(.N), by = .(Species)]
```

### Sorting

```{r, echo = TRUE, eval=FALSE}
dt_iris[Petal.Width > 1, .(mean(Petal.Length)), keyby = .(Species)]
```

### Ordering

Ordering by Species and then by reverse Petal.Width:

```{r, echo = TRUE, eval=FALSE}
dt_iris[order(Species, -Petal.Width)]
```

### Grouping by expression rather than column

Grouping those that have Petal.Length greater/not than 4, and Petal.Width greater/not than 1:

```{r, echo = TRUE, eval=FALSE}
dt_iris[, .N, .(Petal.Length > 4, Petal.Width > 1)]
```

### Computations for multiple columns

Taking the mean of all columns (except the grouping column, Species) using lapply and .SD:

```{r, echo = TRUE, eval=FALSE}
dt_iris[, lapply(.SD, mean), by = Species]
```

### Subsetting for each group

Getting the first two rows for all columns, for each Species:

```{r, echo = TRUE, eval=FALSE}
dt_iris[, head(.SD, 2), by = Species]

```

## Questions?

## Exercises

1 - Tidy the data below:

```{r, echo = TRUE,}
data <- tibble(
  group = c("treat", "control"),
  survival = c(17, 11),
  deceased = c(3, 9)
)
```

2 - Join the dataset flights to the dataset airlines. What should the key(s) be? What do the different types of joins look like?

```{r, echo = TRUE,}
library(nycflights13)
data("flights")
data("airlines")
```

3 - Using flights and data.table, group based on cases that have dep_delay \< 0 and those that have arr_delay \> 0 and count the number in each group. How many groups/rows are there? How many in each group?
