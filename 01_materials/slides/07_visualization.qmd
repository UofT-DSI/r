---
title: "Visualization with ggplot2"
format: html
---

In this lesson, we will be learning how to make charts using the ggplot2 package in R.

## Contents

1. [ggplot basics](#ggplot-basics)
2. [Customization](#customization)
3. [Bar plots](#bar-plots)
4. [Histograms](#histograms)
5. [Scatterplots](#scatterplots)

## ggplot basics

ggplot2 is a package that allows us to make graphics in R. It's loaded with the tidyverse.

```{r}
library(tidyverse)
```

The `ggplot()` function initializes the plot. In the arguments, you will identify the base of your plot. This includes:

* the `data = ...` argument: the data we want to graph from, usually in dataframe form
* the `mapping = ...` argument: the 'aesthetics' we will use; i.e. the ways in which different variables are visually represented

What doesn't go in the `ggplot()` function:

* the type of graph we want
* the way we want the axes to look
* the labels we want

```{r, eval=FALSE, echo = TRUE}
ggplot(data = my_data, mapping = aes())
```

### Aesthetic

In the `mapping argument`, we specify our aesthetic using `aes()` -- the ways in which our data is visually represented.

This is where we indicate what variable we want for the x axis, the y axis, the colour, or any other feature that the plot in question might have.

```{r, eval=FALSE, echo = TRUE}
aes(x = variable1,
    y = variable2,
    shape = variable3,
    color = variable4,
    size = variable5,
    fill = variable6)
```

This takes data and passes it to ggplot, which initializes a plot using that data and specifies that variable1 will be represented on the x axis and variable2 on the y axis.

```{r, eval=FALSE, echo = TRUE}
data |>
  ggplot(aes(x = variable1, y = variable2))
```

### Geom Layers

After initializing, you still won't have a plot. You have to add layers -- which includes the type of plot you want, as well as tweaks and formatting specifics.

Geom layers add types of plot. There are more than 40 geoms! Some common ones:

* bar plots: `geom_bar()`
* histograms: `geom_histogram()`
* scatterplots: `geom_point()`

You add a geom layer by adding it with `+` to the `ggplot()` call:

```{r, eval = FALSE}
ggplot(data = my_data, mapping = aes(x = variable1, y = variable2)) +
  geom_bar()
```


### An example

First we import the data:

```{r, include=T, echo=T, message=F, warning=F}
CES_data <- read_csv("CES_data_short.csv")
```

Construct a bar plot:

```{r, echo = TRUE, warning=FALSE, message=FALSE, fig.height=5, fig.width=11}
CES_data |> 
  ggplot(aes(x = cps19_votechoice)) +
  geom_bar()
```

`geom_bar` automatically plots the number of occurrences of each entry of the `x` variable.

Options for barplots

These are the defaults in a `geom_bar`:

```{r, eval=FALSE, echo = TRUE}
geom_bar(
  stat = "count", # can change to "prop" for proportion
  position = "stack", # can change to "dodge" or "fill"
  width = NULL, # can put a bar width here
  na.rm = FALSE, # can remove NAs
  orientation = NA,  # can specify "x" or "y"
  show.legend = NA # can add or remove a legend
)
```

Construct a histogram: 

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo = TRUE}
CES_data |>
  mutate(age = 90 - cps19_yob) |>
  ggplot(aes(x = cps19_age)) +
  geom_histogram()
```

Options for histograms

```{r, eval=FALSE, echo = TRUE}
geom_histogram(
  stat = "bin", # can change to "count"
  position = "stack", # can change to "identity", "dodge"..
  binwidth = NULL, # can specify the range of each bin
  bins = NULL, # can specify the number of bins
  na.rm = FALSE, # can tell it to ignore NAs
  orientation = NA, # can specify "x" or "y"
  show.legend = NA # can add or remove a legend
)
```

Scatter plot

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo = TRUE}
CES_data |>
  mutate(age = 90 - cps19_yob) |>
  ggplot(aes(x = cps19_age, y = cps19_household)) +
  geom_point()
```

Options for scatterplots

```{r, eval=FALSE, echo = TRUE}
geom_point(
  position = "identity", # can change to "jitter"
  na.rm = FALSE, # can ignore NAs
  show.legend = NA # can add or remove a legend
)
```

### Exercises

Using different variables:

Make a barplot

Make a histogram

Make a scatterplot

## Customization

### Labels

We can change the way that labels appear to improve the look and readability by adding `labs()` to our ggplot.

```{r, eval=FALSE, echo=TRUE}
labs(x = "X name",
     y = NULL,
     title = "Title")
```

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_gender)) + 
  geom_bar() +
  labs(x = "Self-identified gender",
       y = "Count",
       title = "Gender frequencies in CES data")
```

### Axes

How we change the axes depends on what types of variables we have.

The layers take the form: scale_<which axis>_<what type of axis>(). There are VERY many scale_ options.

Similar layers can be added for x and y axes, as well as other graph features like color and size.

Manipulate a continuous x axis with:

```{r, eval=FALSE, echo=TRUE}
scale_x_continuous(
  breaks = , # use a vector to specify locations
  minor_breaks = , # also can be a vector
  n.breaks = , # can specify the number of breaks
  labels = , # change the labels on the breaks
  limits = , # set the upper and lower limits
  position = # "left", "right", "top", "bottom")
```

Manipulate a discrete x axis

```{r, eval=FALSE, echo=TRUE}
scale_x_discrete(
  breaks = , # character vector of breaks
  limits = , # set possible values for scale
  drop = , # TRUE or FALSE to drop unused factor levels
  labels = , # change the labels on the breaks
  position = # "left", "right", "top", "bottom")
```

### Fill

We can change the fill to represent a variable:

```{r, eval=FALSE, echo=TRUE}
data |>
  ggplot(aes(x = variable1,
             fill = variable2)) +
  geom_()
```

or to be a color of choice:

``` {r, eval=FALSE, echo=TRUE}
data |>
  ggplot(aes(x = variable1)) +
  geom_(fill = "my_color")
``` 

The difference is where the `fill =` is located. If it is in the `aes()`, then it will represent a variable. If it is not in the `aes()`, it will just change the look of the graph.

Fill to represent a variable

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age,
             fill = cps19_gender)) +
  geom_histogram()
```

Changing fill to a specific color

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age)) +
  geom_histogram(fill = "#6DAEDB")
```

For some geoms, you will need to change color rather than fill. We can change the color to represent a variable:

```{r, eval=FALSE, echo=TRUE}
data |>
  ggplot(aes(x = variable1,
             color = variable2)) +
  geom_()
```

or to be a color of choice:

```{r, eval=FALSE, echo=TRUE}
data |>
  ggplot(aes(x = variable1)) +
  geom_(color = "my_color")
```

The difference is where the `color =` is located. If it is in the `aes()`, then it will represent a variable. If it is not in the `aes()`, it will just change the look of the graph.

Color to represent a variable:

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age,
             y = cps19_household,
             color = cps19_gender)) +
  geom_smooth()
```

Color for visual effect

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age,
             y = cps19_household)) +
  geom_smooth(color = "#6DAEDB")
```

### Size

We can change the size to represent a variable:

```{r, eval=FALSE, echo=TRUE}
data |>
  ggplot(aes(x = variable1,
             y = variable2,
             size = variable3)) +
  geom_()
```

or to be a size of choice:

```{r, eval=FALSE, echo=TRUE}
data |>
  ggplot(aes(x = variable1,
             y = variable2)) +
  geom_(size = "my_size")
```

The difference is where the `size =` is located. If it is in the aes(), then it will represent a variable. If it is not in the aes(), it will just change the look of the graph.

Size to represent a variable:

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age,
             y = cps19_income_number,
             size = cps19_household)) +
  geom_point()
```

Size for visual effect:

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age,
             y = cps19_income_number)) +
  geom_point(size = 15)
```

### Using multiple geoms

We can layer geoms on top of one another. Geoms can either share their `aes()`:

```{r, eval=FALSE, echo=TRUE}
data |>
  ggplot(aes(x = variable1,
             y = variable2)) +
  geom_() +
  geom_()
```

or they can have their own:

```{r, eval=FALSE, echo=TRUE}
data |>
  ggplot() +
  geom_(aes(x = variable1,
             y = variable2)) +
  geom_(aes(x = variable1,
             y = variable3))
```

Example of geoms that share aesthetics:

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age,
             y = cps19_income_number)) +
  geom_point() +
  geom_smooth()
```

Example of separate geom aesthetics:

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot() +
  geom_point(aes(x = cps19_age,
                 y = cps19_income_number)) +
  geom_line(aes(x = cps19_age,
                y = mean(cps19_income_number, na.rm = TRUE)))
```

### Facets

Facets give you side-by-side graphs for different categories.

```{r, eval=FALSE, echo=TRUE}
facet_wrap(facets = "variables you want to facet by") 
facet_grid(facets = "variables that you want to facet by")
```

Example: 

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age)) +
  geom_histogram() +
  facet_wrap(facets = "cps19_gender")
```

### Themes

Themes are added at the end. They control the overall look.

```{r, eval=FALSE, echo=TRUE}
theme_bw()
theme_classic()
theme_light()
theme_minimal()
```

Example:

```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age)) +
  geom_histogram() +
  facet_wrap(facets = "cps19_gender") +
  theme_minimal()
``` 


```{r warning=FALSE, message=FALSE, fig.height=5, fig.width=11, echo=TRUE}
CES_data |>
  ggplot(aes(x = cps19_age)) +
  geom_histogram() +
  facet_wrap(facets = "cps19_gender") +
  theme_light()
```

## Bar Graphs

We can make a bar graph representing the response to the question: "Which party do you think you will vote for?", named `cps19_votechoice`.

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_bar(aes(x = cps19_votechoice))
```

You may want to use more short forms in the responses to make the graph more readable. To manipulate the axis labels, we use the `scale_x_discrete` function and specify what labels we want:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_bar(aes(x = cps19_votechoice)) +
  scale_x_discrete(labels = c(
    "Liberal Party" = "Liberal",
    "Conservative Party" = "Conservative",
    "Bloc Québécois" = "Bloc",
    "Green Party" = "Green",
    "People's Party" = "PPC",
    "Another party" = "Other",
    "Don't know/ Prefer not to answer" = "DK/PNTA")
  )
```

We can also reorder bars from in a way that makes more sense. To do this, we take the variable and make it into a factor. Factors have a specific order, given in the levels argument:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_bar(aes(x = factor(cps19_votechoice,
                          levels = c("Liberal Party",
                                     "Conservative Party",
                                     "Bloc Québécois",
                                     "Green Party",
                                     "People's Party",
                                     "Another party",
                                     "Don't know/ Prefer not to answer")))) +
  scale_x_discrete(labels = c(
    "Liberal Party" = "Liberal",
    "Conservative Party" = "Conservative",
    "Bloc Québécois" = "Bloc",
    "Green Party" = "Green",
    "People's Party" = "PPC",
    "Another party" = "Other",
    "Don't know/ Prefer not to answer" = "DK/PNTA")
  )
```

What if we want to compare the voting intentions between genders? We can use the fill argument in the aes() function to do that:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_bar(aes(x = factor(cps19_votechoice,
                          levels = c("Liberal Party",
                                     "Conservative Party",
                                     "Bloc Québécois",
                                     "Green Party",
                                     "People's Party",
                                     "Another party",
                                     "Don't know/ Prefer not to answer")),
               fill = cps19_gender)) +
  scale_x_discrete(labels = c(
    "Liberal Party" = "Liberal",
    "Conservative Party" = "Conservative",
    "Bloc Québécois" = "Bloc",
    "Green Party" = "Green",
    "People's Party" = "PPC",
    "Another party" = "Other",
    "Don't know/ Prefer not to answer" = "DK/PNTA"
  ))
```

If we don't want the bars to be stacked, we need to change the `position` argument in the `geom_bar()` function:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_bar(aes(x = factor(cps19_votechoice,
                          levels = c("Liberal Party",
                                     "Conservative Party",
                                     "Bloc Québécois",
                                     "Green Party",
                                     "People's Party",
                                     "Another party",
                                     "Don't know/ Prefer not to answer")),
               fill = cps19_gender),
           position = "dodge") +
  scale_x_discrete(labels = c(
    "Liberal Party" = "Liberal",
    "Conservative Party" = "Conservative",
    "Bloc Québécois" = "Bloc",
    "Green Party" = "Green",
    "People's Party" = "PPC",
    "Another party" = "Other",
    "Don't know/ Prefer not to answer" = "DK/PNTA"
  ))
```

We can change the widths of the bars as well:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_bar(aes(x = factor(cps19_votechoice,
                          levels = c("Liberal Party",
                                     "Conservative Party",
                                     "Bloc Québécois",
                                     "Green Party",
                                     "People's Party",
                                     "Another party",
                                     "Don't know/ Prefer not to answer")),
               fill = cps19_gender),
           position = "dodge",
           width = 0.5) +
  scale_x_discrete(labels = c(
    "Liberal Party" = "Liberal",
    "Conservative Party" = "Conservative",
    "Bloc Québécois" = "Bloc",
    "Green Party" = "Green",
    "People's Party" = "PPC",
    "Another party" = "Other",
    "Don't know/ Prefer not to answer" = "DK/PNTA"
  ))
```


## Histograms

We can make a histogram representing the response to the question: "How do you feel about the federal political parties below? Set the slider to a number from 0 to 100, where 0 means you really dislike the party and 100 means you really like the party." and the Conservative Party, named `cps19_party_rating_24`.

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_histogram(aes(x = cps19_party_rating_24))
```

The histogram splits the range of values for Conservative Party rating into 30 bins automatically, but what if we want a different number of bins? We can change the `bins` argument in the `geom_histogram()` function:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_histogram(aes(x = cps19_party_rating_24),
                 bins = 10)
```

If we want to look at distributions of a variable in different groups, we can use something called faceting. To show what the Conservative Party ratings look like across different views on education spending, we can add the `facet_wrap` function:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_histogram(aes(x = cps19_party_rating_24),
                 bins = 10) +
  facet_wrap(facets = "cps19_spend_educ")
```

We can use the nrow arguments to say how many rows we want the facets to form:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_histogram(aes(x = cps19_party_rating_24),
                 bins = 10) +
  facet_wrap(facets = "cps19_spend_educ",
             nrow = 1)
```

The order of the facets could be better. We use the same factor and levels method as before:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_histogram(aes(x = cps19_party_rating_24),
                 bins = 10) +
  facet_wrap(~factor(cps19_spend_educ,
                     levels = c("Spend less",
                                "Spend about the same as now",
                                "Spend more",
                                "Don't know/ Prefer not to answer")),
             nrow = 1)
```

For any graph, we probably want better labels than the variable names. We add the `labels()` function to specific labels for the x-axis, the y-axis, and the title:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_histogram(aes(x = cps19_party_rating_24),
                 bins = 10) +
  facet_wrap(~factor(cps19_spend_educ,
                     levels = c("Spend less",
                                "Spend about the same as now",
                                "Spend more",
                                "Don't know/ Prefer not to answer")),
             nrow = 1) +
  labs(x = "Conservative Party rating",
       y = "Count",
       title = "Views on education spending and the Conservative Party")
```

We can widen the graph by editing the code chunk, specifying fig.height and fig.width:


```{r, fig.height = 5, fig.width = 10, echo=F}
CES_data |>
  ggplot() +
  geom_histogram(aes(x = cps19_party_rating_24),
                 bins = 10) +
  facet_wrap(~factor(cps19_spend_educ,
                     levels = c("Spend less",
                                "Spend about the same as now",
                                "Spend more",
                                "Don't know/ Prefer not to answer")),
             nrow = 1) +
  labs(x = "Conservative Party rating",
       y = "Count",
       title = "Views on education spending and the Conservative Party")
```

## Scatterplots

We can make a scatterplot representing the relationship between the ages of the survey-takers and the time they spent on the survey, named `cps19_age` and `cps19_Q_TotalDuration`, using `geom_point()`:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_point(aes(x = cps19_age,
             y = cps19_Q_TotalDuration))
```

There are some very large values for time spent on survey that makes it hard to see the rest. We can look at only the values in between 0 seconds and 3600 seconds, or 1 hour. Those that took longer are considered to be 'inattentive'.

One way to do this is to set limits on the axis using `scale_y_continuous()`:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_point(aes(x = cps19_age,
             y = cps19_Q_TotalDuration)) +
  scale_y_continuous(limits = c(0,3600))
```

Many points sitting exactly on top of each other, like what's happening with age, makes it hard to read the graph. If we add the argument `position = "jitter"` to the `geom_point()` function, ggplot will slightly separate points that are in exactly the same spot:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_point(aes(x = cps19_age,
             y = cps19_Q_TotalDuration),
         position = "jitter") +
  scale_y_continuous(limits = c(0,3600))
```

We can decrease or increase the size of the individual points with the size argument in geom_point():

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_point(aes(x = cps19_age,
             y = cps19_Q_TotalDuration),
         position = "jitter",
         size = 0.7) +
  scale_y_continuous(limits = c(0,3600))
```

Again, we can add axis labels with `labs()`:

```{r, echo=F}
CES_data |>
  ggplot() +
  geom_point(aes(x = cps19_age,
             y = cps19_Q_TotalDuration),
         position = "jitter",
         size = 0.7) +
  scale_y_continuous(limits = c(0,3600)) +
  labs(x = "Age",
       y = "Seconds spent on survey",
       title = "Age and time to complete survey amoung attentive survey-takers")
```

## Exercises

Take your: barplots, histograms, and scatterplot from before and customize them. Try to add each different customization to at least one plot.

## Questions?