---
title: "Programming in R"
format: html
---

In this lesson, we will be learning about fundamental programming tools in R, including how to define functions, loops, if-else statements, functional programming with the `purrr` package, and reproducible randomness and simulation.

## Contents

1. [Functions](#functions)
2. [Loops](#loops)
3. [Conditional statements](#conditional-statements)
4. [Functional programming](#functional-programming)
5. [Randomness and simulation](#randomness-and-simulation)

## Functions

You can write your own functions in R, and you should consider doing so when you have copy-pasted a chunk of code twice.

You provide a name, inputs (also known as arguments), and the body of the function that performs the operation.

```{r, echo = TRUE, eval=F}
function_name <- function(inputs) {
  # calculations using inputs 
  # outputs <- ... 
  return(outputs)
}
```

When naming, try not to use names that already have meaning in R.

## Loops

Loops are another tool for reducing the need to duplicate code, this time by repeatedly performing a task.

For loops iterate over a set amount:

```{r,echo = TRUE, eval=F}
for (sequence to iterate over) {
  # code to execute 
  # ...
}
```

While loops iterate based on a stopping condition:

```{r,echo = TRUE, eval=F}
while (iterator condition) {
  # code to execute
  # ...
}
```

A simple example:

```{r, echo = TRUE}
for (i in 1:10){
  print(i*5)
}
```

For loops to modify an existing object

To create new column that adds the Sepal.Length in each row with the Sepal.Length from the previous row:

```{r, echo = TRUE}
for (i in 2:nrow(iris)) {
  iris$previous_combo[i] <- iris$Sepal.Length[i] + iris$Sepal.Length[i-1]
}
iris
```

Different ways to loop:

You can loop over elements:

```{r, echo = TRUE}
for (i in c("a", "b", "c")){
  print(i)
}
```

You can loop over numeric indices:

```{r, echo = TRUE}
for (i in 1:3) {
  print(now( ) + i)
}
```

Using a vector to collect outputs

```{r, echo = TRUE}
outputs <- c()

for (i in 1:5) {
  outputs <- c(outputs, i) * i
}

outputs
```

While loop example

Note that we initiate the iterator i outside the loop and increment it in the loop. If the iterator never increases in the loop, then the loop will never end.

```{r, echo = TRUE}
i = 1
while(i <= 10){
  print(i*5)
  i = i + 1
}
```

## Conditional statements

Basic structure

``` {r,echo = T, eval=F}
if(condition1) {
  <code to execute if condition1 is TRUE>
} else if (condition2) {
  <code to execute if condition1 is FALSE and conditions2 is TRUE>
} else {
  <code to execute if condition1 and condition2 are both FALSE>
}
```

### Conditions

Conditions must either evaluate to TRUE or FALSE.

You can combine multiple conditions using the 'or' operator:

`(condition1) || (condition2)` 

You can combine multiple conditions using the 'and' operator:

`(condition1) && (condition2)`

To find out if any of a list of conditions is TRUE, use `any()`.

To find out if all of a list of conditions is TRUE, use `all()`.

if else function

The function `if_else()` writes out a conditional statement in one line.

```{r, echo=TRUE, eval=F}
if_else(condition, output if condition is TRUE, output if condition is FALSE)
```

### Case when

When you have a list of possible conditions, you can use case_when instead.

```{r,echo=TRUE, eval=F}
case_when(condition1 ~ output1,
          condition2 ~ output2,
          condition3 ~ output3,
          ...
          )
```

Example

```{r, echo=TRUE}
grades <- tibble(grade = c(94, 87, 73))

grades %>%
  mutate(letter = case_when(
    grade >= 80 ~ "A",
    grade >= 70 ~ "B",
    TRUE ~ "F"))
```

Note that each condition is checked in order: if `condition1` is TRUE, `output1` will be chosen and `condition2` will not be checked.

## Functional programming

Iteration is made more straightforward with the `purrr` library.

```{r}
library(purrr)
```


Each type of output has a different function:

`map()` to output lists

`map_lgl()` for logical vectors

`map_int()` for integer vectors

`map_dbl()` for double vectors

`map_chr()` for character vectors

You can use these to loop over columns in a dataset:

```{r, echo=TRUE}
iris %>%
  map_dbl(mean)
```

```{r, echo=TRUE}
iris %>%
  map_chr(typeof)
```

Looping over columns in a dataset

```{r, echo=TRUE}
iris %>%
  map(summary)
```

Mapping over multiple arguments

```{r, echo=TRUE}
x <- list(1, 1, 1)
y <- list(10, 20, 30)

map2(x, y, ~ .x + .y)
```

## Questions?

## Randomness and simulation

We can generate random data in R.

```{r, echo=TRUE}
runif(5)
runif(5)
```

The outcomes will be different every time.

If you want the results to be consistent, you must set a seed. The seed can be any number.

```{r, echo=TRUE}
set.seed(1818)
runif(5)
```

```{r, echo=TRUE}
set.seed(1838)
runif(5)
```

```{r, echo=TRUE}
set.seed(1818)
runif(5)
```

The uniform distribution

``` {r, echo = TRUE, eval=F}
runif(number, min, max)
```

```{r, echo=TRUE}
set.seed(1818)
runif(10, 1, 20)
```

The normal distribution

```{r, echo=TRUE, eval=F}
rnorm(number, mean, sd)
```

```{r, echo=TRUE}
set.seed(1818)
rnorm(10, 5, 1)
```

Sampling

```{r,echo =TRUE, eval=F}
sample(thing to sample from, size = number, replace, prob = vector of probability weights)
```

```{r, echo=TRUE}
set.seed(1818)
sample(c("a", "b", "c"),
       size = 10,
       replace = TRUE,
       prob = c(0.1, 0.2, 0.7))
```

The probability weights are optional. If you do not specify, all the results will be equally probable.

If you specify replace = FALSE, there must be as many or more in the thing that you sample from as the desired sample size.

### Simulating datasets

We can put our randomization skills to use and create toy datasets.

```{r, echo=TRUE}
set.seed(1818)
simulated_data <- tibble(X = runif(10, 0, 20),
       Y = 3*X + rnorm(10, 0, 1)) 

simulated_data
```

Simulating datasets

```{r, echo=TRUE}
simulated_data %>%
  ggplot(aes(x = X, y = Y)) +
  geom_point()
```

## Exercises

1-Write a greeting function that says "good morning", "good afternoon", or "good evening", depending on the time of day.

2-Simulate a dataset using a normal distribution with mean 100 and standard deviation 15 as variable X, and a quadratic transformation of X as variable Y. Graph your data.

## Questions?
